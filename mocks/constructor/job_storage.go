// Code generated by mockery v1.0.0. DO NOT EDIT.

package constructor

import (
	context "context"

	constructor "github.com/coinbase/rosetta-sdk-go/constructor"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/coinbase/rosetta-sdk-go/storage"
)

// JobStorage is an autogenerated mock type for the JobStorage type
type JobStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *JobStorage) Get(_a0 context.Context, _a1 storage.DatabaseTransaction, _a2 string) (*constructor.Job, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *constructor.Job
	if rf, ok := ret.Get(0).(func(context.Context, storage.DatabaseTransaction, string) *constructor.Job); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*constructor.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.DatabaseTransaction, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processing provides a mock function with given fields: _a0, _a1
func (_m *JobStorage) Processing(_a0 context.Context, _a1 string) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ready provides a mock function with given fields: _a0
func (_m *JobStorage) Ready(_a0 context.Context) ([]*constructor.Job, error) {
	ret := _m.Called(_a0)

	var r0 []*constructor.Job
	if rf, ok := ret.Get(0).(func(context.Context) []*constructor.Job); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*constructor.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *JobStorage) Update(_a0 context.Context, _a1 storage.DatabaseTransaction, _a2 *constructor.Job) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, storage.DatabaseTransaction, *constructor.Job) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.DatabaseTransaction, *constructor.Job) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
