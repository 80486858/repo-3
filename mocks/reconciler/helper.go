// Code generated by mockery v1.0.0. DO NOT EDIT.

package reconciler

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/coinbase/rosetta-sdk-go/types"
)

// Helper is an autogenerated mock type for the Helper type
type Helper struct {
	mock.Mock
}

// ChainAndBalance provides a mock function with given fields: ctx, account, currency, liveBlock
func (_m *Helper) ChainAndBalance(ctx context.Context, account *types.AccountIdentifier, currency *types.Currency, liveBlock *types.BlockIdentifier) (*types.BlockIdentifier, bool, *types.Amount, error) {
	ret := _m.Called(ctx, account, currency, liveBlock)

	var r0 *types.BlockIdentifier
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountIdentifier, *types.Currency, *types.BlockIdentifier) *types.BlockIdentifier); ok {
		r0 = rf(ctx, account, currency, liveBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockIdentifier)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *types.AccountIdentifier, *types.Currency, *types.BlockIdentifier) bool); ok {
		r1 = rf(ctx, account, currency, liveBlock)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 *types.Amount
	if rf, ok := ret.Get(2).(func(context.Context, *types.AccountIdentifier, *types.Currency, *types.BlockIdentifier) *types.Amount); ok {
		r2 = rf(ctx, account, currency, liveBlock)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*types.Amount)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *types.AccountIdentifier, *types.Currency, *types.BlockIdentifier) error); ok {
		r3 = rf(ctx, account, currency, liveBlock)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CurrentBlock provides a mock function with given fields: ctx
func (_m *Helper) CurrentBlock(ctx context.Context) (*types.BlockIdentifier, error) {
	ret := _m.Called(ctx)

	var r0 *types.BlockIdentifier
	if rf, ok := ret.Get(0).(func(context.Context) *types.BlockIdentifier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockIdentifier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiveBalance provides a mock function with given fields: ctx, account, currency, index
func (_m *Helper) LiveBalance(ctx context.Context, account *types.AccountIdentifier, currency *types.Currency, index int64) (*types.Amount, *types.BlockIdentifier, error) {
	ret := _m.Called(ctx, account, currency, index)

	var r0 *types.Amount
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountIdentifier, *types.Currency, int64) *types.Amount); ok {
		r0 = rf(ctx, account, currency, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Amount)
		}
	}

	var r1 *types.BlockIdentifier
	if rf, ok := ret.Get(1).(func(context.Context, *types.AccountIdentifier, *types.Currency, int64) *types.BlockIdentifier); ok {
		r1 = rf(ctx, account, currency, index)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.BlockIdentifier)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *types.AccountIdentifier, *types.Currency, int64) error); ok {
		r2 = rf(ctx, account, currency, index)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PruneBalances provides a mock function with given fields: ctx, account, currency, index
func (_m *Helper) PruneBalances(ctx context.Context, account *types.AccountIdentifier, currency *types.Currency, index int64) error {
	ret := _m.Called(ctx, account, currency, index)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountIdentifier, *types.Currency, int64) error); ok {
		r0 = rf(ctx, account, currency, index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
