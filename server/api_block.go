// Copyright 2020 Coinbase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by: OpenAPI Generator (https://openapi-generator.tech)

package server

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/coinbase/rosetta-sdk-go/models"
)

// A BlockAPIController binds http requests to an api service and writes the service results to the
// http response
type BlockAPIController struct {
	service BlockAPIServicer
}

// NewBlockAPIController creates a default api controller
func NewBlockAPIController(s BlockAPIServicer) Router {
	return &BlockAPIController{service: s}
}

// Routes returns all of the api route for the BlockAPIController
func (c *BlockAPIController) Routes() Routes {
	return Routes{
		{
			"Block",
			strings.ToUpper("Post"),
			"/block",
			c.Block,
		},
		{
			"BlockTransaction",
			strings.ToUpper("Post"),
			"/block/transaction",
			c.BlockTransaction,
		},
	}
}

// Block - Get a Block
func (c *BlockAPIController) Block(w http.ResponseWriter, r *http.Request) {
	blockRequest := &models.BlockRequest{}
	// TODO: Assert required params are present
	if err := json.NewDecoder(r.Body).Decode(&blockRequest); err != nil {
		err = EncodeJSONResponse(&models.Error{
			Message: err.Error(),
		}, http.StatusBadRequest, w)
		if err != nil {
			log.Fatal(err)
		}

		return
	}

	result, serviceErr := c.service.Block(*blockRequest)
	if serviceErr != nil {
		err := EncodeJSONResponse(serviceErr, http.StatusInternalServerError, w)
		if err != nil {
			log.Fatal(err)
		}

		return
	}

	if err := EncodeJSONResponse(result, http.StatusOK, w); err != nil {
		log.Fatal(err)
	}
}

// BlockTransaction - Get a Block Transaction
func (c *BlockAPIController) BlockTransaction(w http.ResponseWriter, r *http.Request) {
	blockTransactionRequest := &models.BlockTransactionRequest{}
	// TODO: Assert required params are present
	if err := json.NewDecoder(r.Body).Decode(&blockTransactionRequest); err != nil {
		err = EncodeJSONResponse(&models.Error{
			Message: err.Error(),
		}, http.StatusBadRequest, w)
		if err != nil {
			log.Fatal(err)
		}

		return
	}

	result, serviceErr := c.service.BlockTransaction(*blockTransactionRequest)
	if serviceErr != nil {
		err := EncodeJSONResponse(serviceErr, http.StatusInternalServerError, w)
		if err != nil {
			log.Fatal(err)
		}

		return
	}

	if err := EncodeJSONResponse(result, http.StatusOK, w); err != nil {
		log.Fatal(err)
	}
}
