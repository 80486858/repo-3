items:
- machineParams:
  - image: ubuntu_18_04
    versions:
      kubelet: 1.14.3
  - image: ubuntu_18_04
    versions:
      kubelet: 1.14.3
      controlPlane: 1.14.3
  userdata: |
    set -e
    set -x
    (
    ARCH=amd64
  
    # Obtain server IP addresses.
    HOSTNAME=$(curl -s https://metadata.packet.net/2009-04-04/meta-data/hostname)
    PRIVATEIP=$(curl -s https://metadata.packet.net/2009-04-04/meta-data/local-ipv4)
    PUBLICIP=$(curl -s https://metadata.packet.net/2009-04-04/meta-data/public-ipv4)

    CA_CERT_DIR=/etc/kubernetes/pki
  
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    touch /etc/apt/sources.list.d/kubernetes.list
    sh -c 'echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
    apt-get update -y
    apt-get install -y \
        ca-certificates \
        socat \
        jq \
        ebtables \
        apt-transport-https \
        cloud-utils \
        prips
  
    # If something failed during package installation but one of docker/kubeadm/kubelet was already installed
    # an apt-mark hold after the install won't do it, which is why we test here if the binaries exist and if
    # yes put them on hold
    set +e
    which docker && apt-mark hold docker docker-ce
    which kubelet && apt-mark hold kubelet
    which kubeadm && apt-mark hold kubeadm
  
    # When docker is started from within the apt installation it fails with a
    # 'no sockets found via socket activation: make sure the service was started by systemd'
    # Apparently the package is broken in a way that it gets started without its dependencies, manually starting
    # it works fine though
    which docker && systemctl start docker
    set -e
  
    function install_configure_docker () {
        # prevent docker from auto-starting
        echo "exit 101" > /usr/sbin/policy-rc.d
        chmod +x /usr/sbin/policy-rc.d
        trap "rm /usr/sbin/policy-rc.d" RETURN
  
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository \
           "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
           $(lsb_release -cs) \
           stable"
  
        export CR_PKG=''
        if [ -n "$CR_VERSION" ]; then
            export CR_PKG="$CR_PACKAGE=$CR_VERSION"
        else
            export CR_PKG="$CR_PACKAGE"
        fi
  
        apt-get install -y ${CR_PKG}
        echo 'DOCKER_OPTS="--iptables=false --ip-masq=false"' > /etc/default/docker
        systemctl daemon-reload
        systemctl enable docker
        systemctl start docker
    }
    install_configure_docker
  
    # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
    # search based on our SemVer to find the right (newest) package version.
    function getversion() {
        name=$1
        prefix=$2
        version=$(apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
        if [[ -z "$version" ]]; then
        echo Can\'t find package $name with prefix $prefix
        exit 1
        fi
        echo $version
    }
    KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
    KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
    apt-get install -y \
        kubelet=${KUBELET} \
        kubeadm=${KUBEADM}
  
    # kubeadm uses 10th IP as DNS server
    CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
  
    # add cloud provider args.
    touch /etc/systemd/system/kubelet.service.d/20-kubelet.conf
    cat > /etc/systemd/system/kubelet.service.d/20-kubelet.conf <<EOF
    [Service]
    Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni"
    Environment="KUBELET_DNS_ARGS=--resolv-conf=/run/systemd/resolve/resolv.conf --cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN} --node-ip=${PRIVATEIP}"
    Environment="KUBELET_EXTRA_ARGS=--allow-privileged=true --cloud-provider=external --authentication-token-webhook=true --read-only-port=0"
    EOF
    systemctl daemon-reload
    systemctl restart kubelet.service
  
    function install_custom_ca () {
        if [ ! -n "$MASTER_CA_CERTIFICATE" ]; then
            return
        fi
        if [ ! -n "$MASTER_CA_PRIVATE_KEY" ]; then
            return
        fi
 
        echo "Installing custom certificate authority..."
 
        PKI_PATH=${CA_CERT_DIR}
        mkdir -p ${PKI_PATH}
        CA_CERT_PATH=${PKI_PATH}/ca.crt
        echo ${MASTER_CA_CERTIFICATE} | base64 -d > ${CA_CERT_PATH}
        chmod 0644 ${CA_CERT_PATH}
        CA_KEY_PATH=${PKI_PATH}/ca.key
        echo ${MASTER_CA_PRIVATE_KEY} | base64 -d > ${CA_KEY_PATH}
        chmod 0600 ${CA_KEY_PATH}
    }
  
    if [ "$ROLE" = "master" ]; then
      # Set up kubeadm config file to pass parameters to kubeadm init.
      touch /etc/kubernetes/kubeadm_config.yaml
      cat > /etc/kubernetes/kubeadm_config.yaml <<EOF
      apiVersion: kubeadm.k8s.io/v1alpha1
      kind: MasterConfiguration
      kubernetesVersion: v${CONTROL_PLANE_VERSION}
      token: ${TOKEN}
      api:
        advertiseAddress: ${PUBLICIP}
        bindPort: ${PORT}
      networking:
        serviceSubnet: ${SERVICE_CIDR}
        podSubnet: ${POD_CIDR}
      controllerManagerExtraArgs:
        cluster-cidr: ${POD_CIDR}
        service-cluster-ip-range: ${SERVICE_CIDR}
        allocate-node-cidrs: "true"
      apiServerCertSANs:
      - ${PUBLICIP}
      - ${PRIVATEIP}
      - ${HOSTNAME}
      - 127.0.0.1
      certificatesDir: ${CA_CERT_DIR}
    EOF
  
      install_custom_ca
      kubeadm init --config /etc/kubernetes/kubeadm_config.yaml
      # Apply Weave CNI
      for tries in $(seq 1 60); do
          kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')" && break
          sleep 1
      done
    else
      export ENDPOINT=''
      if [ -n "$MASTER_PRIVATE" ]; then
          export ENDPOINT=$MASTER_PRIVATE
      else
          export ENDPOINT=$MASTER
      fi
  
      kubeadm join --token "${TOKEN}" "${ENDPOINT}" --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification
    fi
  
  
    # Annotate node.
    for tries in $(seq 1 60); do
        kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node ${HOSTNAME} machine=${MACHINE} && break
        sleep 1
    done
  
    echo done.
    ) 2>&1 | tee /var/log/startup.log
